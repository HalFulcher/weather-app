{"version":3,"sources":["components/LocationDetails.js","components/ForecastSummary.js","components/ForecastSummaries.js","components/ForecastDetails.js","requests/getForecast.js","components/SearchForm.js","images/blue-sky-clouds-image.jpg","images/clouds-image.jpg","images/rain-image.jpg","images/sun-image.jpg","components/App.js","index.js"],"names":["LocationDetails","props","city","country","errorMessage","className","defaultProps","ForecastSummary","date","description","icon","temperature","onSelect","data-testid","moment","format","name","iconId","max","type","onClick","ForecastSummaries","forecasts","onForecastSelect","map","forecast","ForecastDetails","humidity","wind","min","speed","direction","toUpperCase","getForecast","searchText","setErrorMessage","setSelectedDate","setForecasts","setLocation","endpoint","axios","get","then","response","console","log","data","location","catch","error","status","SearchForm","setSearchText","onSubmit","htmlFor","id","onChange","event","target","value","App","useState","selectedDate","useEffect","backgroundImage","selectedForecast","find","cloudsImage","rainImage","sunImage","blueSkyCloudsImage","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee59dc65.chunk.js","sourcesContent":["// City and country title at top\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/LocationDetails.css\";\n\nconst LocationDetails = (props) => {\n  const { city, country, errorMessage } = props;\n  return errorMessage ? (\n    <h1>{errorMessage}</h1>\n  ) : (\n    <h1 className=\"location-details\">{`${city}, ${country}`}</h1>\n  );\n};\n\nexport default LocationDetails;\n\nLocationDetails.defaultProps = {\n  errorMessage: \"\",\n};\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n  errorMessage: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { WeatherIcon } from \"weather-react-icons\";\nimport moment from \"moment\";\nimport \"../styles/ForecastSummary.css\";\n\nconst ForecastSummary = (props) => {\n  const { date, description, icon, temperature, onSelect } = props;\n  return (\n    <div className=\"forecast-summary\" data-testid=\"forecast-summary\">\n      <div className=\"forecast-summary__date\">\n        {moment(date).format(\"ddd D MMM\")}\n      </div>\n      <div className=\"forecast-summary__icon\" data-testid=\"forecast-icon\">\n        <WeatherIcon name=\"owm\" iconId={icon} />\n      </div>\n      <div className=\"forecast-summary__temperature\">\n        {temperature.max}\n        &deg;C\n      </div>\n      <div className=\"forecast-summary__description\">{description}</div>\n      <div className=\"forecast-summary__details\">\n        <button type=\"button\" onClick={() => onSelect(date)}>\n          More details\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ForecastSummary;\n\nForecastSummary.propTypes = {\n  date: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n  temperature: PropTypes.shape({\n    min: PropTypes.number,\n    max: PropTypes.number,\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ForecastSummary from \"./ForecastSummary\";\nimport \"../styles/ForecastSummaries.css\";\n\nconst ForecastSummaries = ({ forecasts, onForecastSelect }) => (\n  <div className=\"forecast-summaries\">\n    {forecasts.map((forecast) => (\n      <ForecastSummary\n        key={forecast.date}\n        date={forecast.date}\n        description={forecast.description}\n        icon={forecast.icon}\n        onSelect={onForecastSelect}\n        temperature={forecast.temperature}\n      />\n    ))}\n  </div>\n);\nexport default ForecastSummaries;\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.number.isRequired,\n      description: PropTypes.string.isRequired,\n      icon: PropTypes.string.isRequired,\n      temperature: PropTypes.shape({\n        max: PropTypes.number,\n        min: PropTypes.number,\n      }),\n    })\n  ).isRequired,\n  onForecastSelect: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport \"../styles/ForecastDetails.css\";\n\nconst ForecastDetails = ({ forecast }) => {\n  const { date, humidity, temperature, wind } = forecast;\n  return (\n    <div className=\"forecast-details\">\n      <div className=\"forecast-details__date\">\n        {moment(date).format(\"ddd Do MMM\")}\n      </div>\n      <div className=\"forecast-details__humidity\">\n        {`Humidity: ${humidity}%`}\n      </div>\n      <div className=\"forecast-details__temperature\">\n        {`Max temp: ${temperature.max}`}\n        &deg;C\n      </div>\n      <div className=\"forecast-details__temperature\">\n        {`Min temp: ${temperature.min}`}\n        &deg;C\n      </div>\n      <div className=\"forecast-details__wind__speed\">{`Wind speed: ${wind.speed}km`}</div>\n      <div className=\"forecast-details__wind__direction\">{`Wind direction: ${wind.direction.toUpperCase()}`}</div>\n    </div>\n  );\n};\n\nexport default ForecastDetails;\n\nForecastDetails.propTypes = {\n  forecast: PropTypes.shape({\n    date: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    temperature: PropTypes.shape({\n      max: PropTypes.number,\n      min: PropTypes.number,\n    }).isRequired,\n    wind: PropTypes.shape({\n      speed: PropTypes.number,\n      direction: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n","/* eslint-disable no-console */\n\nimport axios from \"axios\";\n\nconst getForecast = (\n  searchText,\n  setErrorMessage,\n  setSelectedDate,\n  setForecasts,\n  setLocation\n) => {\n  setErrorMessage(\"\");\n\n  let endpoint = \"https://mcr-codes-weather-app.herokuapp.com/forecast\";\n\n  if (searchText) {\n    endpoint += `?city=${searchText}`;\n  }\n\n  return axios\n    .get(endpoint)\n    .then((response) => {\n      console.log(response.data);\n      setSelectedDate(response.data.forecasts[0].date);\n      setForecasts(response.data.forecasts);\n      setLocation(response.data.location);\n    })\n    .catch((error) => {\n      const { status } = error.response;\n      if (status === 404) {\n        setErrorMessage(\"No such city. Try again.\");\n        console.error(\"No such city. Try again.\", error);\n      }\n      if (status === 500) {\n        setErrorMessage(\"Server error.\");\n        console.error(\"Server error\", error);\n      }\n    });\n};\n\nexport default getForecast;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getByLabelText } from \"@testing-library/react\";\n\nconst SearchForm = ({ searchText, setSearchText, onSubmit }) => {\n  const handleInputChange = (event) => setSearchText(event.target.value);\n\n  return (\n    <div className=\"search-form\">\n      <getByLabelText htmlFor=\"city\">UK City: </getByLabelText>\n      <input\n        type=\"text\"\n        name=\"city\"\n        id=\"city\"\n        onChange={handleInputChange}\n        value={searchText}\n      />\n      <button type=\"submit\" onClick={onSubmit}>\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  searchText: PropTypes.string.isRequired,\n  setSearchText: PropTypes.func.isRequired,\n};\n","export default __webpack_public_path__ + \"static/media/blue-sky-clouds-image.ee30d977.jpg\";","export default __webpack_public_path__ + \"static/media/clouds-image.bc8b75d8.jpg\";","export default __webpack_public_path__ + \"static/media/rain-image.773d97af.jpg\";","export default __webpack_public_path__ + \"static/media/sun-image.7acb3f79.jpg\";","import React, { useState, useEffect } from \"react\";\nimport \"../styles/App.css\";\nimport LocationDetails from \"./LocationDetails\";\nimport ForecastSummaries from \"./ForecastSummaries\";\nimport ForecastDetails from \"./ForecastDetails\";\nimport getForecast from \"../requests/getForecast\";\nimport SearchForm from \"./SearchForm\";\nimport blueSkyCloudsImage from \"../images/blue-sky-clouds-image.jpg\";\nimport cloudsImage from \"../images/clouds-image.jpg\";\nimport rainImage from \"../images/rain-image.jpg\";\nimport sunImage from \"../images/sun-image.jpg\";\n\nconst App = () => {\n  const [forecasts, setForecasts] = useState([]);\n  const [location, setLocation] = useState({ city: \"\", country: \"\" });\n  const [selectedDate, setSelectedDate] = useState(0);\n  const [searchText, setSearchText] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    getForecast(\n      searchText,\n      setErrorMessage,\n      setSelectedDate,\n      setForecasts,\n      setLocation\n    );\n  }, []);\n\n  const selectedForecast = forecasts.find(\n    (forecast) => forecast.date === selectedDate\n  );\n\n  // change background image based on weather\n\n  let backgroundImage;\n\n  if (selectedForecast) {\n    switch (selectedForecast.description) {\n      case \"Clouds\":\n        backgroundImage = cloudsImage;\n        break;\n      case \"Rain\":\n        backgroundImage = rainImage;\n        break;\n      case \"Clear\":\n        backgroundImage = sunImage;\n        break;\n      default:\n        backgroundImage = blueSkyCloudsImage;\n    }\n  } else {\n    backgroundImage = blueSkyCloudsImage;\n  }\n\n  const handleCitySearch = () => {\n    getForecast(\n      searchText,\n      setErrorMessage,\n      setSelectedDate,\n      setForecasts,\n      setLocation\n    );\n  };\n\n  const handleForecastSelect = (date) => setSelectedDate(date);\n\n  return (\n    <div\n      className=\"weather-app\"\n      style={{ backgroundImage: `url(${backgroundImage})` }}\n    >\n      <SearchForm\n        searchText={searchText}\n        setSearchText={setSearchText}\n        onSubmit={handleCitySearch}\n      />\n      <LocationDetails\n        city={location.city}\n        country={location.country}\n        errorMessage={errorMessage}\n      />\n      {!errorMessage && (\n        <>\n          {selectedForecast && <ForecastDetails forecast={selectedForecast} />}\n        </>\n      )}\n      <ForecastSummaries\n        forecasts={forecasts}\n        onForecastSelect={handleForecastSelect}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}